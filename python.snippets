global !p

def make_placeholders(snip):
	"""
	This function creates placeholders.
	"""

	start = snip.snippet_start[0]
	end = snip.snippet_end[0]
	anon_snippet_body = "\n".join(
		snip.buffer[i]
		for i in range(start, end + 1)
	)

	for i in range(start, end):
		del snip.buffer[start]

	snip.buffer[start] = ''
	snip.expand_anon(anon_snippet_body)

def make_params(
        n_params: str,
		start: int = 2,
        offset: str = "\t\t",
        ) -> str:
    """
    This function creates N parameters with hints

    Parameters
    ----------
    n_params : str
        Number of parameters to generate.
	start : int
		Initial number of the placeholder.
    offset : str
        Kind of offset that must be added at the start of each parameter.

    Returns
    -------
    str_params : str
        String with the generated parameters.
    """

    n_params = int(n_params)
    str_params = "\n"
    str_params += "\n".join(
            f"{offset}${{{i}:param_{i//2}}}: ${{{i + 1}:type}}" +
            ("," if i < 2 * n_params - 1 else "")
            for i in range(start, 2 * n_params + start, 2)
            )
    return str_params + f"\n{offset}"

def make_numpy_doc(
        n_params: str,
        last: int,
        start: int = 2,
        offset: str = "\t"
        ) -> str:
    """
    This function creates N parameters as numpy doc.

    Parameters
    ----------
    n_params : str
        Number of parameters to generate.
    last : int
        Number of previous placehoders.
    start : int
        Initial number of the placeholder.
    offset : str
        Kind of offset that must be added at the start of each parameter.

    Returns
    -------
    str_doc : str
        String with the generated parameters.
    """
    n_params = int(n_params)
    str_doc = ""
    for i in range(start, 2 * n_params + start, 2):
        str_doc += f"{offset}${i} : ${i + 1}\n{offset}\t${{{last}:Description}}\n"
        last += 1
    return str_doc
endglobal

post_jump "make_placeholders(snip)"
snippet 'fun(\d+)' "Creates a function with N arguments" br
def `!p snip.rv = "${1:name}"`(`!p snip.rv = make_params(match.group(1))`) -> `!p snip.rv = f"${{{2 + 2 * int(match.group(1))}:out_type}}"`:
	"""
	Parameters
	----------
`!p snip.rv = make_numpy_doc(match.group(1), 3 + 2 * int(match.group(1)))`
	Returns
	-------
`!p snip.rv = f"\t${{{3 * int(match.group(1)) + 4}:out}} : ${2 * int(match.group(1)) + 2}"`
`!p snip.rv = f"\t\t${{{3 * int(match.group(1)) + 5}:Description}}"`
	"""
`!p snip.rv = f"\t${{{3 * int(match.group(1)) + 6}:pass}}"`
endsnippet

post_jump "make_placeholders(snip)"
snippet 'dfun(\d+)' "Creates a decorated function" br
@`!p snip.rv = "${1:decorator}"`
def `!p snip.rv = "${2:name}"`(`!p snip.rv = make_params(match.group(1), 3)`) -> `!p snip.rv = f"${{{3 + 2 * int(match.group(1))}:out_type}}"`:
	"""
	Parameters
	----------
`!p snip.rv = make_numpy_doc(match.group(1), 4 + 2 * int(match.group(1)), 3)`
	Returns
	-------
`!p snip.rv = f"\t${{{3 * int(match.group(1)) + 5}:out}} : ${2 * int(match.group(1)) + 3}"`
`!p snip.rv = f"\t\t${{{3 * int(match.group(1)) + 6}:Description}}"`
	"""
`!p snip.rv = f"\t${{{3 * int(match.group(1)) + 7}:pass}}"`

endsnippet

snippet imp "Imports a library"
import ${1:name}
endsnippet

snippet impas "Imports a library with an alias"
import ${1:name} as ${2:alias}
endsnippet

snippet from "Imports a package from a library"
from ${1:name} import ${2:package}
endsnippet

snippet fori "Creates an autoincremental for loop"
for ${1:var} in range(${2:limit}):
	${3:pass}
endsnippet

snippet listc "Creates a list comprehension var"
${1:name} = [${2:val} for ${3:var} in ${4:iter}]
endsnippet
